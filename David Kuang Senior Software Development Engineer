David Kuang currently working with Ford as Senior Software Development Engineer / Production Development-Deployment Engineer
Major interests:
I.  Artificial Intelligence (AI) see 'PCA_Ford_MachineLearning' application of SciKit-learn framework and Vehicle Data mining

II. AutomationFramework-python-based
(1)AutomatedTestFramework-python-lettuce-AnalysisandDesign one of top 5 Automation Best Practice. I.E. steps.py
from lettuce import *    (Note: pip install --upgrade pip, then pip install lettuce under python2) URL is [ https://www.google.com/search?sxsrf=ALeKk01smF9bmNQI7xvTUqpdMzufS2t8qg%3A1589382641923&source=hp&ei=8Q28XvOxNcWPtAbJnphw&q=github+lettuce&oq=github+lettuce&gs_lcp=CgZwc3ktYWIQAzIECCMQJzIGCAAQFhAeMgYIABAWEB4yBggAEBYQHjIGCAAQFhAeOgcIIxDqAhAnOgQIABBDOgcIABCDARBDOgUIABCDAToHCAAQFBCHAjoCCAA6CggAEIMBEBQQhwI6CAgAEBYQChAeUJk0WN1JYJNMaAFwAHgAgAF5iAHlCZIBAzkuNZgBAKABAaoBB2d3cy13aXqwAQo&sclient=psy-ab&ved=0ahUKEwiz7p_ej7HpAhXFB80KHUkPBg4Q4dUDCAg&uact=5 ]

@step(u'Given There are numbers 2 and 3')
def given_there_are_numbers_2_and_3(step):
    world.a = 2
    world.b = 3

@step(u'When added together')
def when_added_together(step):
    world.total = world.a + world.b

@step(u'Then they equal 5')
def then_they_equal_5(step):
    assert (world.total == 5), 'Amount should equal 5'

(2) See seperate folder 'AutomatedTestFramework-pyunit-unittestboth2and3-AnalysisDesign' under this Repo 

(3) Top2-AutomatedFramework-2019-pytest          >pytest
=================================== test session starts ====================================
platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0
rootdir: /Users/family/Downloads/Top2-AutomatedFramework-2019-pytest
plugins: arraydiff-0.3, doctestplus-0.3.0, mock-3.1.0, openfiles-0.3.2, remotedata-0.3.1
collected 109 items                                                                        

tests/00_empty_test.py .                                                             [  0%]
tests/01_basic_test.py .                                                             [  1%]
tests/02_special_assertions_test.py ...                                              [  4%]
tests/03_simple_fixture_test.py ..                                                   [  6%]
tests/04_fixture_returns_test.py .                                                   [  7%]
tests/05_yield_fixture_test.py .                                                     [  8%]
tests/06_request_test.py .                                                           [  9%]
tests/07_request_finalizer_test.py .                                                 [ 10%]
tests/08_params_test.py ........                                                     [ 17%]
tests/09_params-ception_test.py ................                                     [ 32%]
tests/10_advanced_params-ception_test.py ................                            [ 46%]
tests/11_mark_test.py ...                                                            [ 49%]
tests/14_class_based_test.py .                                                       [ 50%]
tests/15_advanced_class_test.py ..                                                   [ 52%]
tests/16_scoped_and_meta_fixtures_test.py .......................................... [ 90%]
........                                                                             [ 98%]
tests/19_re_usable_mock_test.py ..                                                   [100%]

===================================== warnings summary =====================================
/Users/family/anaconda3/lib/python3.7/site-packages/_pytest/mark/structures.py:332
  /Users/family/anaconda3/lib/python3.7/site-packages/_pytest/mark/structures.py:332: PytestUnknownMarkWarning: Unknown pytest.mark.db - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    PytestUnknownMarkWarning,

/Users/family/anaconda3/lib/python3.7/site-packages/_pytest/mark/structures.py:332
  /Users/family/anaconda3/lib/python3.7/site-packages/_pytest/mark/structures.py:332: PytestUnknownMarkWarning: Unknown pytest.mark.slow - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/latest/mark.html
    PytestUnknownMarkWarning,

-- Docs: https://docs.pytest.org/en/latest/warnings.html
========================== 109 passed, 2 warnings in 0.69 seconds ==========================

(4) Top1-AutomatedFrameworkPython3and2-in2019-Robot

(5) Python related APIs/tools/utilities
[5.1] Documentation Expert especially Sphinx extracting property from source code to make dynamic Doc server
<5.1.1> pip install [-U] Sphinx         Note: Official web https://www.sphinx-doc.org/en/master/
<5.1.2> mkdir DKSphinx, then 3 subfolders they are scripts, rst, and html. Note: Sample python scripts can be found via http://python.sheffner.com/
<5.1.3> $ sphinx-quickstart  | sphinx-build -b html sourcedir builddir (Note: Dir Name could be a bit different) | make html
<5.1.4> Deploy on a server to release the dynamic docs for the specific scripts that you need to document 
Reference-Demo1 https://www.youtube.com/watch?v=qrcj7sVuvUA (Unix/Linux Box) 
ReferenceDemo2 https://www.youtube.com/watch?v=MeaDUypDAoI (Windows and html as a standalone)
<5.1.5> Best practice of Sphinx/Autodoc https://medium.com/@eikonomega/getting-started-with-sphinx-autodoc-part-1-2cebbbca5365 ; Besides, for underscore method doesn't show up, here is the link https://stackoverflow.com/questions/1149280/how-can-i-use-sphinx-autodoc-extension-for-private-methods; and/or https://stackoverflow.com/questions/28224554/sphinx-autodoc-skip-member-from-docstring
i.e. Few .py files under https://github.com/DavidKuangGitHub/myrepository_US_Dearborn_MichigansinceJun23_2019/tree/master/programminginpython3_completeintro/worklaptop_python_scriptssinceFeb7th_2020 are perfectly implemented by following Sphinx styles.

[5.2] Remote Python Call (RPyC) rpyc.readthedocs.io and grpc.io thats googlePRC(Remote Procedure Call) framework. 
rpyc_classic.py to launch RPyC server 
<5.2.1> pip install RPyC and download/setup
<5.2.2> $ python bin/rpyc_classic.py        [To launch a Server]
import rpyc
conn = rpyc.classic.connect("localhost")
conn.modules.sys.stdout.write("HW David Kuang on Jun 5th 2020")
<5.2.3>google RemoteProcedureCall we call gprc.io. 
Similarly as per official website gprc.io, pip install grpcio
pip install grpcio-tools
As per git-reference https://github.com/grpc/grpc, clone/setup/downloadputinrightplace
cd ~/grpc/examples/python/helloworld
python greeter_server.py
python greeter_client.py        Note: https://www.youtube.com/watch?v=GwKz4LGeWiI may help from 3:27 out of 7:11 video long.

[5.3] TTS and SpeechRecognition. Text-To-Speech (TTS) i.e. https://gtts.readthedocs.io/en/latest Google-Text-To-Speech; https://pypi.org/project/SpeechRecognition/ 
pip install gTTS (Note: For some company-based VPN, there might be switched back and forth to do pip install)
POC see texttospeech_TTS.py and speechRecognition_hw.py in my Repo as examples.

[5.4] python enhancement
<5.4.1> i.e. importnumpyasnp.py and numpy_matplotlib_dot_pyplotasplt_scipy_dot_io_dot_wavfile.py in my Repo
<5.4.2> Python3/Python2 convert, __future__, future, six and builtins; import pyaudio, import pydub, import wave can see example importpyaudio_playWAVEfile.py uploaded
<5.4.3> Embedded development. For example AUX cable as audio input cable, that should be connected with audio generator (i.e. Vehicle InfoTainment system). see checkdevice.py 
Use Device Manager ensure 'Realtek Audio' icon enabled, then right-click icon-Speaker to open 'Volume Mixer', ensure Device and Applications working properly.

[5.5] Appium is an open source test automation framework for use with native, hybrid and mobile web apps. Appium drives iOS, Andriod, and Windows apps using the WebDriver protocol.
(1) http://appium.io/  (2) https://www.youtube.com/watch?v=sd0Cy1VYWzU (Automate Mobile application using Appium Selenium) (3)
<5.5.1> Mobly (1) https://libraries.io/github/google/mobly (2) https://jeffhermanmobly.readthedocs.io/en/latest/tutorial.html
(3) https://github.com/google/mobly/blob/master/docs/tutorial.md
Mobly is a Python-based test framework that specializes in supporting test cases that require multiple devices, complex environment, or custom hardware setups.
pip install mobly refer (1) sample_configMobly.yml 
TestBeds:
  # A test bed where adb will find Android devices.
  - Name: SampleTestBed
    Controllers:
        AndroidDevice: '*'
        
(2) Moblyhello_world_test.py still working on
"""Moblyhello_world_test.py"""
from mobly import base_test
from mobly import test_runner
from mobly.controllers import android_device

class HelloWorldTest(base_test.BaseTestClass):
  def setup_class(self):
    self.ads = self.register_controller(android_device)
    self.dut = self.ads[0]
    self.dut.load_snippet('mbs', 'com.google.android.mobly.snippet.bundled')

  def test_hello(self):
    self.dut.mbs.makeToast('Hello World David Kuang!')

if __name__ == '__main__':
    test_runner.main()

To run $python Moblyhello_world_test.py -c sample_configMobly.yml

<5.5.2> VHAT (Virtual HMI Automation Toolset https://www.controleng.com/articles/tools-for-hmi-applicationsincludes-online-extras/ ); 
APK (Android Package Kit, Andriod application package https://en.wikipedia.org/wiki/Android_application_package ) as of Vehicle Infotainment System
<5.5.3> Architect for Software Application System of Andriod for example i.e. vehicle_component, AOSP, AOSw/oP 
(1) https://source.android.com/devices/architecture xing 
(2) Andriod is an open source operating system for mobile devices and a corresponding open source project led by Google. AOSP (Android Open Source Project)
^
|   Apps with its exhancement to iOS
|   Android Framework
|   Native Libraries
|   Android Runtime
|   HAL/HIDL
|   Linux Kernel

III. Database Application Developer(DAD) certified i.e. J2EE/JavaEE  

IV. Android https://developer.android.com/ use gmail accout as login
(1) Android SDK (Software Development Kits) Platform-Tool can be found here https://developer.android.com/studio/releases/platform-tools
It is a component for the Android SDK.
It includes tools that interface with the Android platform, such as adb, fastboot, and systrace. 
There tools are required for Android app development, because these tools are needed when you want to 
unlock your device bootloader and flash it with a new system image.
(2) Android SDK Platform-Tools for Windows/Mac/Linux. Multiple AndroidStudio projects have been done with maintenance as per requested
[2.1]MyApplicationDK1 that has been successfully deployed into my test Andriod Mobile Phone SamSung
[2.2]MyAppDavidKuang2 to fix ADB server initialization issue and refence link https://www.youtube.com/watch?v=C_Ka7cKwXW0 regarding How to play a sound file using the MediaPlayer Class via AndriodStudio


V. iOS as Apple Development Engineer in IBM Canada with the most advanced MacBook equipped as senior IT professional
(1) xCode environment at local MacBook. Note: MacBook OS X version 10.14.4 is a must as per Apple
(2) For example OS X EI Capitan upgrade could be one of these options.

VI.  developer.huawei.com Senior Software Development Engineer 

VII. Other interests, i.e. https://www.kaggle.com/ Proof Of Concept POC
